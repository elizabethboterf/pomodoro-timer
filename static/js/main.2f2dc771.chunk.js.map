{"version":3,"sources":["utils/duration/index.js","pomodoro/progress-bar.js","pomodoro/session-started.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","ProgressBar","session","focusDuration","breakDuration","timePassed","label","timeRemaining","className","role","aria-valuemin","aria-valuemax","aria-valuenow","style","width","SessionStarted","isTimerRunning","data-testid","givenSeconds","seconds","round","secondsToDuration","height","nextTick","prevState","max","Pomodoro","classNameToBoolean","useState","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","type","onClick","currentDuration","min","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","currentState","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f2dc771.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\n\nfunction ProgressBar({ session, focusDuration, breakDuration}) {\n    const timePassed=(session.label==\"Focusing\" ? (((focusDuration*60 - session.timeRemaining)/(focusDuration*60))*100) : (((breakDuration*60 - session.timeRemaining)/(breakDuration*60))*100) );\n    return (\n      <div\n        className=\"progress-bar progress-bar-striped\"\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        aria-valuenow={timePassed} \n        style={{ width: timePassed + \"%\" }} \n      />\n  );\n}\n\nexport default ProgressBar;","import React from \"react\";\nimport ProgressBar from \"./progress-bar.js\"\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration\";\n\nfunction SessionStarted( {isTimerRunning, session, focusDuration, breakDuration} ){\n    if(isTimerRunning || (!isTimerRunning && session)){\n        return(<div>\n            <div className=\"row mb-2\">\n            <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration ***********/}\n            <h2 data-testid=\"session-title\">\n                {session.label} for {session.label==\"Focusing\" ? (minutesToDuration(focusDuration)) : (minutesToDuration(breakDuration))} minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session ************/}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n                {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n            </div>\n        </div>\n        <div className=\"row mb-2\">\n            <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n                <ProgressBar session={session} focusDuration={focusDuration} breakDuration={breakDuration} />\n            </div>\n            </div>\n        </div>\n        </div>\n    );\n    }\n    return null;\n}\n\nexport default SessionStarted;","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration\";\nimport { getByTestId } from \"@testing-library/react\";\nimport ProgressBar from \"./progress-bar.js\"\nimport SessionStarted from \"./session-started.js\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const initialFocus=(25);\n  const initialBreak=(5);\n  \n  const [focusDuration, setFocusDuration] = useState(initialFocus);\n  const [breakDuration, setBreakDuration] = useState(initialBreak);\n  \n  const handleMinusFocus=()=>setFocusDuration((currentDuration)=>(Math.max(5, currentDuration-5)));\n  const handleMinusBreak=()=>setBreakDuration((currentDuration)=>(Math.max(1, currentDuration-1)));\n  const handlePlusFocus=()=>setFocusDuration((currentDuration)=>(Math.min(60, currentDuration+5)));\n  const handlePlusBreak=()=>setBreakDuration((currentDuration)=>(Math.min(15, currentDuration+1)));\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n  \n  function handleStop(){\n    if(isTimerRunning){\n      setIsTimerRunning((currentState) => false);\n      setSession((currentSession)=>null);\n      setFocusDuration(initialFocus);\n      setBreakDuration(initialBreak);\n    }\n  }\n\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session *********************************/}\n              <button\n                type=\"button\"\n                className=\"plusMinus btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                //value=\"decrease-focus\"\n                onClick={handleMinusFocus}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session ***************************/}\n              <button\n                type=\"button\"\n                className=\"plusMinus btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                //value=\"increase-focus\"\n                onClick={handlePlusFocus}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session******************************/}\n                <button\n                  type=\"button\"\n                  className=\"plusMinus btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  //value=\"decrease-break\"\n                  onClick={handleMinusBreak}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session***************************/}\n                <button\n                  type=\"button\"\n                  className=\"plusMinus btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  id=\"increase-break\"\n                  onClick={handlePlusBreak}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session ****************************************/}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={handleStop}\n              disabled={!isTimerRunning}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        <SessionStarted isTimerRunning={isTimerRunning} session={session} focusDuration={focusDuration} breakDuration={breakDuration} />\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused *********************************/}\n       </div>\n   </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}